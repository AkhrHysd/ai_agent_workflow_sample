---
description: 
globs: 
alwaysApply: false
---
# AIエージェントワークフロー - 一般化版

このドキュメントは、AIエージェントが開発をサポートする際の一般的なワークフローとプロセスを定義します。

## 基本的な役割

AIエージェントは以下の2つの主要な役割を持ちます：

1. **要件からのタスク計画作成**：機能要望やプロダクト要件からタスクリストを作成
2. **個別タスクの実装支援**：計画されたタスク中から指定されたタスクを実装

これらの役割は原則として明確に分離し、一連の流れで自動的に実施しないこと。例外として、簡単な要望の場合はチャットでの明示的な指示があれば、計画作成を経ずに直接実装を行うことが許可されます。

## タスク計画プロセス

1. **要件受領**：チャットを通じて機能要望やプロダクト要件を受け取る
   - 通常の要件説明による受領
   - ADR（Architecture Decision Record）による決定事項の受領
   - 既存タスクの修正・変更要求の受領
   
2. **要件分析**：要件を分析し、技術的な実現性や既存システムとの整合性を評価

3. **タスク分解**：要件を小さな実装可能なタスクに分解
   - 各タスクには一意のID（例：`T-001`）を付与
   - 依存関係を明示（「このタスクは〇〇の完了後に着手可能」など）
   - 優先順位を設定（高/中/低）

4. **タスク計画の文書化**：分解したタスクをマークダウン形式で文書化
   - 保存場所：`docs/planning/tasks/[機能名]_tasks.md`
   - テンプレート：[タスク計画テンプレート](mdc:docs/planning/tasks/template.md)を使用
   - Front-matterでメタデータを記録し、TL;DRセクションに主要なポイントを簡潔にまとめること

5. **タスク計画の提示**：作成したタスク計画をチャットで提示し、承認を得る

## ADR（Architecture Decision Record）処理手順

1. **ADR提示時の対応**:
   - ADRが提示されたら、まず内容を確認し書式のレビューではなく、決定内容の分析を行う
   - 代替案が不足している場合は積極的に提案する
   - 決定に必要な情報が不足している場合は、ユーザーに質問する
   - 「Proposed」ステータスの場合は、「Accepted」に変更してもらうよう促す

2. **ADRからのプランニング移行**:
   - ADRが「Accepted」になったら、自動的にプランニングフェーズに移行する
   - ユーザーが特に指示しなくても、`docs/planning/tasks/`に適切なタスク計画を作成する
   - ADRとプランニングの役割を明確に区別する（ADRは決定記録、タスク計画は実装計画）

3. **ADRとタスク計画の関係**:
   - ADRは「何をするか」と「なぜするか」を記録する
   - タスク計画は「どのように実装するか」の詳細を記録する
   - この流れを常に意識し、各ドキュメントの役割に合った内容を記載する

## 実装プロセス

指定されたタスクの実装は、TDD（テスト駆動開発）の原則に従って進めます：

1. **設計**：実装前に必要に応じて設計を文書化
   - 複雑な設計判断が必要な場合はADR（Architecture Decision Record）を作成
   - 保存場所：`docs/decisions/[決定内容].md`
   - テンプレート：
     - 複雑な決定には[ADRフル版テンプレート](mdc:docs/decisions/template_full.md)を使用
     - 単純な決定には[ADRライト版テンプレート](mdc:docs/decisions/template_light.md)を使用

2. **テスト作成**：実装前にテストを作成
   - ユニットテスト、統合テスト、E2Eテストを適切に組み合わせる
   - UIコンポーネントの場合はStorybookを使用

3. **実装**：テストを満たす最小限のコードを実装
   - プロジェクトのコード規約に従うこと
   - コミットメッセージは一貫したフォーマットに準拠

4. **テスト実行**：実装したコードがテストを通過することを確認

5. **タスク完了時のコミットメッセージ提供**：
   - タスク完了時にコミットメッセージのテンプレートを提供
   - 形式：
   ```
   [タイプ]: [簡潔な説明]
   
   - [変更内容1]
   - [変更内容2]
   - [変更内容3]
   ...
   
   関連タスク: #[タスクID]
   ```

6. **実装結果の報告**：実装完了後、チャットで結果を報告
   - 変更したファイル
   - テスト結果
   - 次のステップの提案

7. **実装レビュー文書の作成**：
   - 保存場所：`docs/reviews/[タスクID]_review.md`
   - テンプレート：[実装レビューテンプレート](mdc:docs/reviews/template.md)を使用
   - Front-matterでメタデータを記録し、TL;DRセクションに主要なポイントを簡潔にまとめること

## コミュニケーション方法

1. **設計の議論**：複雑な設計判断が必要な場合
   - `docs/decisions/`ディレクトリにADR形式のファイルを作成
   - 設計の意図、検討した選択肢、選択理由を記録

2. **実装中の不明点**：
   - チャットで質問
   - コードコメントに質問や懸念事項を記録し、後で一括議論

3. **実装後のレビュー**：
   - 実装結果を`docs/reviews/[タスクID]_review.md`に記録
   - 実装の要点、注意点、テスト結果を報告

## ドキュメントテンプレート

AIエージェントは以下のテンプレートを活用して一貫性のあるドキュメントを作成します：

1. **タスク計画**: [タスク計画テンプレート](mdc:docs/planning/tasks/template.md)
   - Front-matterでメタデータを記録
   - TL;DRセクションで簡潔に要点をまとめる
   - タスクリストと詳細情報を提供

2. **ADR（アーキテクチャ決定記録）**:
   - [ADRフル版テンプレート](mdc:docs/decisions/template_full.md): 複雑な決定に使用
   - [ADRライト版テンプレート](mdc:docs/decisions/template_light.md): 単純な決定に使用

3. **実装レビュー**: [実装レビューテンプレート](mdc:docs/reviews/template.md)
   - Front-matterでメタデータを記録
   - TL;DRセクションで簡潔に実装内容をまとめる
   - テスト結果や重要なポイントを詳細に記録

## ディレクトリ構造

AIエージェントが作成・管理するドキュメントは以下のディレクトリ構造で整理します：

```
/docs/
  /planning/      # 計画関連のドキュメント
    /tasks/       # タスク計画のマークダウンファイル
    /roadmap/     # 全体的なロードマップ
  /decisions/     # ADR (Architecture Decision Records)
  /reviews/       # 実装結果のレビュー
  /specifications/ # 仕様書や詳細設計書
```

## エラー対応と改善サイクル

1. **問題の特定**:
   - エラーや不具合が発生した場合は詳細を記録
   - 問題の再現手順を明確化

2. **根本原因分析**:
   - エラーの根本原因を特定
   - 関連するコードやシステムの依存関係を調査

3. **解決策の提案**:
   - 短期的な修正と長期的な改善策を区別して提案
   - 複数の選択肢がある場合はそれぞれのメリット・デメリットを提示

4. **実装と検証**:
   - 修正を実装
   - テストで問題が解決したことを確認

5. **再発防止策**:
   - 類似の問題が再発しないための対策を提案
   - 必要に応じてプロセスやガイドラインの更新を推奨

## プロアクティブな提案

AIエージェントは以下の場合にプロアクティブな提案を行います：

1. **潜在的な問題の特定**:
   - パフォーマンスの問題
   - セキュリティリスク
   - スケーラビリティの懸念

2. **コード品質の向上**:
   - リファクタリングの機会
   - テストカバレッジの改善
   - 重複コードの削減

3. **新技術の導入検討**:
   - 既存の問題を解決する可能性のある新しいツールやライブラリ
   - ベストプラクティスの適用

AIエージェントは常に、プロジェクトの目標と優先事項を念頭に置いて提案を行います。

## ADRチェックリスト

ADRレビュー時:
- [ ] 決定内容の分析を行った
- [ ] 代替案について検討した
- [ ] 必要な情報をユーザーに質問した
- [ ] ステータスが適切か確認した
