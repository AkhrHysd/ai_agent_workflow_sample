---
description: 
globs: 
alwaysApply: true
---
# AI開発ガイドライン - 一般化版

## 基本ルール

1. **多言語対応**: すべての出力とコメントは同一言語で一貫して行うこと。ユーザーの使用環境に適した言語を選択する。

2. **データプライバシー**: 個人情報保護を最優先し、データセキュリティを徹底すること。テストデータに実在しそうな名前は使用しない。

3. **技術スタック遵守**: プロジェクトの標準技術スタックを遵守し、不必要なライブラリの追加は避けること。

4. **リポジトリ構造理解**: モノレポなどのプロジェクト構造を理解し、適切なパッケージ間の依存関係を維持すること。

## コード規約

1. **型安全性**: 静的型付け言語では厳格な型チェックを活用し、動的型付け言語でも型ヒントを積極的に活用すること。

2. **クリーンコード**: プロジェクトで定義されたコーディングスタイルガイドに従うこと。

3. **テスト駆動開発(TDD)**: 新機能実装前にテストを書き、テストが通ることを確認してから実装を進めること。単体テスト、統合テスト、E2Eテストを適切に組み合わせること。

4. **コメント記述**: 複雑なロジックやビジネスルールにはコメントを残し、保守性を高めること。

5. **命名規則**: 変数名やファイル名は英語で、関数やコンポーネントは明確で説明的な名前を使用すること。

## 開発ワークフロー

1. **AIエージェント活用**: 機能開発の計画段階でAIエージェントを活用し、イシュー・タスクリストの生成を行うこと。

2. **Gitフロー**: 適切な接頭辞を使用したブランチ命名と、一貫性のあるコミットメッセージを使用すること。

3. **プルリクエスト**: 小さな単位でのPRを推奨し、レビュー前にセルフレビューを行うこと。PR説明には変更内容と影響範囲を明記すること。

4. **CI/CDパイプライン**: テスト、リント、ビルドを自動化し、PRごとに確認すること。

5. **コンポーネント駆動開発**: UIコンポーネントは先に設計し、バリエーションを確認してから実装に統合すること。

6. **コードレビュー**: 機能性、パフォーマンス、セキュリティ、テストカバレッジの観点からレビューすること。

## 機能実装

1. **認証処理**: セキュリティベストプラクティスに従った認証処理を実装すること。

2. **データアクセス制御**: 権限ベースのアクセス制御を適切に実装すること。

3. **バッチ処理**: 自動実行される処理は冪等性を保証し、エラーログを適切に残すこと。

4. **データ入出力**: 標準的な形式と文字コードを使用し、異なる形式にも対応できるようにすること。

## UI/UX

1. **アクセシビリティ**: WAI-ARIAガイドラインに従い、アクセシビリティを確保すること。

2. **レスポンシブデザイン**: モバイルファーストの設計で、様々な画面サイズに対応すること。

3. **エラーハンドリング**: ユーザーフレンドリーなエラーメッセージを表示し、技術的な詳細は隠すこと。

4. **入力検証**: フロントエンドとバックエンドで一貫した検証ロジックを使用すること。

## デプロイメント/インフラ

1. **環境変数管理**: 機密情報は環境変数で管理し、ソースコードにハードコードしないこと。

2. **パフォーマンス最適化**: ユーザーの多い地域でのレスポンス速度を最適化すること。

3. **バックアップ戦略**: データベースとファイルストレージの定期的なバックアップ手順を確立すること。

